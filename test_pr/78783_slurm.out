You have the following GPUs: 0
Sourcing conda.sh
Activating conda environment
Wed May 27 09:39:04 2020       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 440.82       Driver Version: 440.82       CUDA Version: 10.2     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  GeForce RTX 208...  On   | 00000000:1A:00.0 Off |                  N/A |
| 27%   29C    P8     8W / 250W |      0MiB / 11019MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
Chosen n_points:  750
InfoGAN model with ld:  infogan1_l01_s2_4RL_model 2
Device is: cuda
torch.Size([750, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.112859s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.108918s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.104326s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.103111s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.10933s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.109126s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.105362s
InfoGAN model with ld:  infogan2_l15_s2_4RL_model 2
Device is: cuda
torch.Size([750, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.102924s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.110069s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.107746s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106312s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.107602s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.104944s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.111008s
InfoGAN model with ld:  infogan3_l35_s2_4RL_model 2
Device is: cuda
torch.Size([750, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.101057s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.0952036s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.105675s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.104399s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.108761s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.108721s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.108038s
InfoGAN model with ld:  infogan4_l01_s3_4RL_model 3
Device is: cuda
torch.Size([750, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([750, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.0982702s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.105384s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.102194s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.108495s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.101323s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.10796s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.107751s
InfoGAN model with ld:  infogan5_l15_s3_4RL_model 3
Device is: cuda
torch.Size([750, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([750, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.104867s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.112747s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.107684s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.118196s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106767s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.109377s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.10797s
InfoGAN model with ld:  infogan6_l35_s3_4RL_model 3
Device is: cuda
torch.Size([750, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([750, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.126567s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.107418s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106615s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.108102s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106104s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.0991521s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.105367s
InfoGAN model with ld:  infogan7_l01_s6_4RL_model 6
Device is: cuda
torch.Size([750, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([750, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.100593s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.103715s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106027s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106582s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106596s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106041s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.108754s
InfoGAN model with ld:  infogan8_l15_s6_4RL_model 6
Device is: cuda
torch.Size([750, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([750, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106344s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.109162s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.110757s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.107586s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.109679s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.109166s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.107183s
InfoGAN model with ld:  infogan9_l35_s6_4RL_model 6
Device is: cuda
torch.Size([750, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([750, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.109053s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.10728s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106489s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.109543s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.106839s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.108372s
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.10401s
VAE model with ld:  vae1 2
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.101324s
VAE model with ld:  vae2 2
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.0937791s
VAE model with ld:  vae3 2
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.0911379s
VAE model with ld:  vae4 3
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.0919158s
VAE model with ld:  vae5 3
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.0916755s
VAE model with ld:  vae6 3
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.091439s
VAE model with ld:  vae7 6
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.0889485s
VAE model with ld:  vae8 6
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.0990465s
VAE model with ld:  vae9 6
torch.Size([750, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([750, 128])
torch.Size([750, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 750 samples...
Evaluated k-NN precision and recall in: 0.0861936s
Results ready  {'infogan1_l01_s2_4RL_model': {'res_gan': {'precision': array([0.75866667]), 'recall': array([0.17866667])}, 'res_gan5': {'precision': array([0.852]), 'recall': array([0.248])}, 'res_gan10': {'precision': array([0.86266667]), 'recall': array([0.24133333])}, 'res_gan15': {'precision': array([0.86666667]), 'recall': array([0.228])}, 'res_gan20': {'precision': array([0.8]), 'recall': array([0.16666667])}, 'res5_gan15': {'precision': array([0.93866667]), 'recall': array([0.32133333])}, 'res5_gan20': {'precision': array([0.91333333]), 'recall': array([0.24533333])}}, 'infogan2_l15_s2_4RL_model': {'res_gan': {'precision': array([0.852]), 'recall': array([0.15733333])}, 'res_gan5': {'precision': array([0.968]), 'recall': array([0.30933333])}, 'res_gan10': {'precision': array([0.964]), 'recall': array([0.288])}, 'res_gan15': {'precision': array([0.95866667]), 'recall': array([0.27333333])}, 'res_gan20': {'precision': array([0.93066667]), 'recall': array([0.22533333])}, 'res5_gan15': {'precision': array([0.996]), 'recall': array([0.36533333])}, 'res5_gan20': {'precision': array([0.98933333]), 'recall': array([0.29466667])}}, 'infogan3_l35_s2_4RL_model': {'res_gan': {'precision': array([0.72666667]), 'recall': array([0.12266667])}, 'res_gan5': {'precision': array([0.89866667]), 'recall': array([0.248])}, 'res_gan10': {'precision': array([0.91866667]), 'recall': array([0.24533333])}, 'res_gan15': {'precision': array([0.92533333]), 'recall': array([0.24666667])}, 'res_gan20': {'precision': array([0.89066667]), 'recall': array([0.188])}, 'res5_gan15': {'precision': array([0.98]), 'recall': array([0.33733333])}, 'res5_gan20': {'precision': array([0.968]), 'recall': array([0.27733333])}}, 'infogan4_l01_s3_4RL_model': {'res_gan': {'precision': array([0.66133333]), 'recall': array([0.324])}, 'res_gan5': {'precision': array([0.82]), 'recall': array([0.412])}, 'res_gan10': {'precision': array([0.83466667]), 'recall': array([0.408])}, 'res_gan15': {'precision': array([0.824]), 'recall': array([0.39066667])}, 'res_gan20': {'precision': array([0.79733333]), 'recall': array([0.34533333])}, 'res5_gan15': {'precision': array([0.90533333]), 'recall': array([0.46666667])}, 'res5_gan20': {'precision': array([0.87866667]), 'recall': array([0.40266667])}}, 'infogan5_l15_s3_4RL_model': {'res_gan': {'precision': array([0.54]), 'recall': array([0.42666667])}, 'res_gan5': {'precision': array([0.792]), 'recall': array([0.67466667])}, 'res_gan10': {'precision': array([0.81466667]), 'recall': array([0.69466667])}, 'res_gan15': {'precision': array([0.79066667]), 'recall': array([0.64933333])}, 'res_gan20': {'precision': array([0.76533333]), 'recall': array([0.55733333])}, 'res5_gan15': {'precision': array([0.88666667]), 'recall': array([0.79066667])}, 'res5_gan20': {'precision': array([0.86533333]), 'recall': array([0.70933333])}}, 'infogan6_l35_s3_4RL_model': {'res_gan': {'precision': array([0.512]), 'recall': array([0.36266667])}, 'res_gan5': {'precision': array([0.79466667]), 'recall': array([0.67333333])}, 'res_gan10': {'precision': array([0.79866667]), 'recall': array([0.69333333])}, 'res_gan15': {'precision': array([0.80933333]), 'recall': array([0.65466667])}, 'res_gan20': {'precision': array([0.784]), 'recall': array([0.58])}, 'res5_gan15': {'precision': array([0.88933333]), 'recall': array([0.792])}, 'res5_gan20': {'precision': array([0.87066667]), 'recall': array([0.732])}}, 'infogan7_l01_s6_4RL_model': {'res_gan': {'precision': array([0.644]), 'recall': array([0.55866667])}, 'res_gan5': {'precision': array([0.76666667]), 'recall': array([0.64533333])}, 'res_gan10': {'precision': array([0.78533333]), 'recall': array([0.616])}, 'res_gan15': {'precision': array([0.75866667]), 'recall': array([0.60533333])}, 'res_gan20': {'precision': array([0.74933333]), 'recall': array([0.564])}, 'res5_gan15': {'precision': array([0.88266667]), 'recall': array([0.69466667])}, 'res5_gan20': {'precision': array([0.85333333]), 'recall': array([0.66])}}, 'infogan8_l15_s6_4RL_model': {'res_gan': {'precision': array([0.504]), 'recall': array([0.648])}, 'res_gan5': {'precision': array([0.74533333]), 'recall': array([0.704])}, 'res_gan10': {'precision': array([0.77733333]), 'recall': array([0.72266667])}, 'res_gan15': {'precision': array([0.77866667]), 'recall': array([0.704])}, 'res_gan20': {'precision': array([0.74933333]), 'recall': array([0.63466667])}, 'res5_gan15': {'precision': array([0.88533333]), 'recall': array([0.792])}, 'res5_gan20': {'precision': array([0.87066667]), 'recall': array([0.75066667])}}, 'infogan9_l35_s6_4RL_model': {'res_gan': {'precision': array([0.50133333]), 'recall': array([0.63066667])}, 'res_gan5': {'precision': array([0.73733333]), 'recall': array([0.67866667])}, 'res_gan10': {'precision': array([0.75866667]), 'recall': array([0.69466667])}, 'res_gan15': {'precision': array([0.78266667]), 'recall': array([0.67066667])}, 'res_gan20': {'precision': array([0.752]), 'recall': array([0.62666667])}, 'res5_gan15': {'precision': array([0.88133333]), 'recall': array([0.74533333])}, 'res5_gan20': {'precision': array([0.85733333]), 'recall': array([0.712])}}, 'vae1': {'res_vae': {'precision': array([0.97733333]), 'recall': array([0.28933333])}}, 'vae2': {'res_vae': {'precision': array([0.976]), 'recall': array([0.30666667])}}, 'vae3': {'res_vae': {'precision': array([0.984]), 'recall': array([0.28533333])}}, 'vae4': {'res_vae': {'precision': array([0.988]), 'recall': array([0.30133333])}}, 'vae5': {'res_vae': {'precision': array([0.976]), 'recall': array([0.304])}}, 'vae6': {'res_vae': {'precision': array([0.972]), 'recall': array([0.30533333])}}, 'vae7': {'res_vae': {'precision': array([0.976]), 'recall': array([0.29733333])}}, 'vae8': {'res_vae': {'precision': array([0.97866667]), 'recall': array([0.29066667])}}, 'vae9': {'res_vae': {'precision': array([0.98533333]), 'recall': array([0.31733333])}}}
Chosen n_points:  1000
InfoGAN model with ld:  infogan1_l01_s2_4RL_model 2
Device is: cuda
torch.Size([1000, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.155313s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.160982s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.158107s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.156514s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.165091s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.162769s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.152524s
InfoGAN model with ld:  infogan2_l15_s2_4RL_model 2
Device is: cuda
torch.Size([1000, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.162283s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.159651s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.166342s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.159621s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.165686s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.152009s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.152602s
InfoGAN model with ld:  infogan3_l35_s2_4RL_model 2
Device is: cuda
torch.Size([1000, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.152721s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.158751s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.161018s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.160136s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.152636s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.153287s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.167896s
InfoGAN model with ld:  infogan4_l01_s3_4RL_model 3
Device is: cuda
torch.Size([1000, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([1000, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.156934s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.156379s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.159538s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.160726s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.159055s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.165979s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.143984s
InfoGAN model with ld:  infogan5_l15_s3_4RL_model 3
Device is: cuda
torch.Size([1000, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([1000, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.156229s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.163817s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.158366s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.161761s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.156502s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.156063s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.15198s
InfoGAN model with ld:  infogan6_l35_s3_4RL_model 3
Device is: cuda
torch.Size([1000, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([1000, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.16374s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.157427s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.161257s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.153463s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.160138s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.153797s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.158658s
InfoGAN model with ld:  infogan7_l01_s6_4RL_model 6
Device is: cuda
torch.Size([1000, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([1000, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.153593s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.153429s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.166721s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.156169s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.159632s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.157984s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.142896s
InfoGAN model with ld:  infogan8_l15_s6_4RL_model 6
Device is: cuda
torch.Size([1000, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([1000, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.155289s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.168967s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.156918s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.162827s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.155786s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.159962s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.160961s
InfoGAN model with ld:  infogan9_l35_s6_4RL_model 6
Device is: cuda
torch.Size([1000, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([1000, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.155264s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.155213s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.154311s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.152777s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.156833s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.151258s
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.154514s
VAE model with ld:  vae1 2
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.145967s
VAE model with ld:  vae2 2
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.143476s
VAE model with ld:  vae3 2
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.153598s
VAE model with ld:  vae4 3
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.145786s
VAE model with ld:  vae5 3
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.141891s
VAE model with ld:  vae6 3
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.165336s
VAE model with ld:  vae7 6
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.145531s
VAE model with ld:  vae8 6
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.142476s
VAE model with ld:  vae9 6
torch.Size([1000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([1000, 128])
torch.Size([1000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 1000 samples...
Evaluated k-NN precision and recall in: 0.142623s
Results ready  {'infogan1_l01_s2_4RL_model': {'res_gan': {'precision': array([0.726]), 'recall': array([0.164])}, 'res_gan5': {'precision': array([0.807]), 'recall': array([0.26])}, 'res_gan10': {'precision': array([0.829]), 'recall': array([0.234])}, 'res_gan15': {'precision': array([0.818]), 'recall': array([0.223])}, 'res_gan20': {'precision': array([0.791]), 'recall': array([0.174])}, 'res5_gan15': {'precision': array([0.907]), 'recall': array([0.297])}, 'res5_gan20': {'precision': array([0.898]), 'recall': array([0.235])}}, 'infogan2_l15_s2_4RL_model': {'res_gan': {'precision': array([0.831]), 'recall': array([0.122])}, 'res_gan5': {'precision': array([0.955]), 'recall': array([0.26])}, 'res_gan10': {'precision': array([0.964]), 'recall': array([0.232])}, 'res_gan15': {'precision': array([0.953]), 'recall': array([0.221])}, 'res_gan20': {'precision': array([0.924]), 'recall': array([0.17])}, 'res5_gan15': {'precision': array([0.991]), 'recall': array([0.278])}, 'res5_gan20': {'precision': array([0.987]), 'recall': array([0.209])}}, 'infogan3_l35_s2_4RL_model': {'res_gan': {'precision': array([0.718]), 'recall': array([0.084])}, 'res_gan5': {'precision': array([0.905]), 'recall': array([0.217])}, 'res_gan10': {'precision': array([0.915]), 'recall': array([0.229])}, 'res_gan15': {'precision': array([0.925]), 'recall': array([0.2])}, 'res_gan20': {'precision': array([0.872]), 'recall': array([0.187])}, 'res5_gan15': {'precision': array([0.978]), 'recall': array([0.277])}, 'res5_gan20': {'precision': array([0.974]), 'recall': array([0.219])}}, 'infogan4_l01_s3_4RL_model': {'res_gan': {'precision': array([0.709]), 'recall': array([0.257])}, 'res_gan5': {'precision': array([0.82]), 'recall': array([0.36])}, 'res_gan10': {'precision': array([0.829]), 'recall': array([0.336])}, 'res_gan15': {'precision': array([0.817]), 'recall': array([0.313])}, 'res_gan20': {'precision': array([0.791]), 'recall': array([0.259])}, 'res5_gan15': {'precision': array([0.911]), 'recall': array([0.386])}, 'res5_gan20': {'precision': array([0.902]), 'recall': array([0.322])}}, 'infogan5_l15_s3_4RL_model': {'res_gan': {'precision': array([0.472]), 'recall': array([0.31])}, 'res_gan5': {'precision': array([0.755]), 'recall': array([0.623])}, 'res_gan10': {'precision': array([0.763]), 'recall': array([0.649])}, 'res_gan15': {'precision': array([0.778]), 'recall': array([0.617])}, 'res_gan20': {'precision': array([0.746]), 'recall': array([0.519])}, 'res5_gan15': {'precision': array([0.854]), 'recall': array([0.733])}, 'res5_gan20': {'precision': array([0.836]), 'recall': array([0.679])}}, 'infogan6_l35_s3_4RL_model': {'res_gan': {'precision': array([0.467]), 'recall': array([0.28])}, 'res_gan5': {'precision': array([0.756]), 'recall': array([0.622])}, 'res_gan10': {'precision': array([0.788]), 'recall': array([0.656])}, 'res_gan15': {'precision': array([0.789]), 'recall': array([0.636])}, 'res_gan20': {'precision': array([0.754]), 'recall': array([0.562])}, 'res5_gan15': {'precision': array([0.882]), 'recall': array([0.751])}, 'res5_gan20': {'precision': array([0.873]), 'recall': array([0.709])}}, 'infogan7_l01_s6_4RL_model': {'res_gan': {'precision': array([0.629]), 'recall': array([0.447])}, 'res_gan5': {'precision': array([0.756]), 'recall': array([0.525])}, 'res_gan10': {'precision': array([0.751]), 'recall': array([0.544])}, 'res_gan15': {'precision': array([0.752]), 'recall': array([0.501])}, 'res_gan20': {'precision': array([0.733]), 'recall': array([0.428])}, 'res5_gan15': {'precision': array([0.859]), 'recall': array([0.596])}, 'res5_gan20': {'precision': array([0.849]), 'recall': array([0.531])}}, 'infogan8_l15_s6_4RL_model': {'res_gan': {'precision': array([0.447]), 'recall': array([0.618])}, 'res_gan5': {'precision': array([0.708]), 'recall': array([0.713])}, 'res_gan10': {'precision': array([0.737]), 'recall': array([0.68])}, 'res_gan15': {'precision': array([0.736]), 'recall': array([0.662])}, 'res_gan20': {'precision': array([0.72]), 'recall': array([0.61])}, 'res5_gan15': {'precision': array([0.842]), 'recall': array([0.77])}, 'res5_gan20': {'precision': array([0.828]), 'recall': array([0.712])}}, 'infogan9_l35_s6_4RL_model': {'res_gan': {'precision': array([0.415]), 'recall': array([0.604])}, 'res_gan5': {'precision': array([0.683]), 'recall': array([0.683])}, 'res_gan10': {'precision': array([0.722]), 'recall': array([0.692])}, 'res_gan15': {'precision': array([0.733]), 'recall': array([0.658])}, 'res_gan20': {'precision': array([0.703]), 'recall': array([0.63])}, 'res5_gan15': {'precision': array([0.838]), 'recall': array([0.745])}, 'res5_gan20': {'precision': array([0.838]), 'recall': array([0.706])}}, 'vae1': {'res_vae': {'precision': array([0.977]), 'recall': array([0.3])}}, 'vae2': {'res_vae': {'precision': array([0.974]), 'recall': array([0.306])}}, 'vae3': {'res_vae': {'precision': array([0.974]), 'recall': array([0.288])}}, 'vae4': {'res_vae': {'precision': array([0.976]), 'recall': array([0.296])}}, 'vae5': {'res_vae': {'precision': array([0.972]), 'recall': array([0.301])}}, 'vae6': {'res_vae': {'precision': array([0.973]), 'recall': array([0.287])}}, 'vae7': {'res_vae': {'precision': array([0.972]), 'recall': array([0.286])}}, 'vae8': {'res_vae': {'precision': array([0.977]), 'recall': array([0.286])}}, 'vae9': {'res_vae': {'precision': array([0.972]), 'recall': array([0.287])}}}
Chosen n_points:  5000
InfoGAN model with ld:  infogan1_l01_s2_4RL_model 2
Device is: cuda
torch.Size([5000, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.00131s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.08502s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.02518s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.03481s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.13268s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.1097s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.02246s
InfoGAN model with ld:  infogan2_l15_s2_4RL_model 2
Device is: cuda
torch.Size([5000, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.9948s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.95836s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.04737s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.02492s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.06628s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.08249s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.07344s
InfoGAN model with ld:  infogan3_l35_s2_4RL_model 2
Device is: cuda
torch.Size([5000, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.99549s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.04175s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.02584s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.07594s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.05386s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.07587s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.12171s
InfoGAN model with ld:  infogan4_l01_s3_4RL_model 3
Device is: cuda
torch.Size([5000, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([5000, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.98269s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.0362s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.02251s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.97974s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.07437s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.09654s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.07687s
InfoGAN model with ld:  infogan5_l15_s3_4RL_model 3
Device is: cuda
torch.Size([5000, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([5000, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.00299s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.04152s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.98742s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.07034s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.07106s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.10631s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.06432s
InfoGAN model with ld:  infogan6_l35_s3_4RL_model 3
Device is: cuda
torch.Size([5000, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([5000, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.06088s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.99749s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.09336s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.06297s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.11174s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.091s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.04849s
InfoGAN model with ld:  infogan7_l01_s6_4RL_model 6
Device is: cuda
torch.Size([5000, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([5000, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.12915s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.08558s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.09388s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.13194s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.09315s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.09601s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.05901s
InfoGAN model with ld:  infogan8_l15_s6_4RL_model 6
Device is: cuda
torch.Size([5000, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([5000, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.08748s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.08316s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.15281s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.10983s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.1261s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.06677s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.11245s
InfoGAN model with ld:  infogan9_l35_s6_4RL_model 6
Device is: cuda
torch.Size([5000, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([5000, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.07105s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.12055s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.14419s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.10629s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.08838s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.04112s
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 4.07571s
VAE model with ld:  vae1 2
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.84011s
VAE model with ld:  vae2 2
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.78924s
VAE model with ld:  vae3 2
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.80708s
VAE model with ld:  vae4 3
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.84315s
VAE model with ld:  vae5 3
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.79719s
VAE model with ld:  vae6 3
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.83408s
VAE model with ld:  vae7 6
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.8532s
VAE model with ld:  vae8 6
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.82233s
VAE model with ld:  vae9 6
torch.Size([5000, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([5000, 128])
torch.Size([5000, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 5000 samples...
Evaluated k-NN precision and recall in: 3.77187s
Results ready  {'infogan1_l01_s2_4RL_model': {'res_gan': {'precision': array([0.576]), 'recall': array([0.1298])}, 'res_gan5': {'precision': array([0.7426]), 'recall': array([0.2054])}, 'res_gan10': {'precision': array([0.7568]), 'recall': array([0.2118])}, 'res_gan15': {'precision': array([0.7194]), 'recall': array([0.201])}, 'res_gan20': {'precision': array([0.662]), 'recall': array([0.1516])}, 'res5_gan15': {'precision': array([0.7934]), 'recall': array([0.208])}, 'res5_gan20': {'precision': array([0.7534]), 'recall': array([0.1582])}}, 'infogan2_l15_s2_4RL_model': {'res_gan': {'precision': array([0.637]), 'recall': array([0.1422])}, 'res_gan5': {'precision': array([0.909]), 'recall': array([0.2646])}, 'res_gan10': {'precision': array([0.9146]), 'recall': array([0.2688])}, 'res_gan15': {'precision': array([0.8996]), 'recall': array([0.2572])}, 'res_gan20': {'precision': array([0.7926]), 'recall': array([0.1998])}, 'res5_gan15': {'precision': array([0.947]), 'recall': array([0.267])}, 'res5_gan20': {'precision': array([0.8754]), 'recall': array([0.207])}}, 'infogan3_l35_s2_4RL_model': {'res_gan': {'precision': array([0.5626]), 'recall': array([0.0996])}, 'res_gan5': {'precision': array([0.846]), 'recall': array([0.2102])}, 'res_gan10': {'precision': array([0.8714]), 'recall': array([0.223])}, 'res_gan15': {'precision': array([0.8584]), 'recall': array([0.2218])}, 'res_gan20': {'precision': array([0.7678]), 'recall': array([0.1748])}, 'res5_gan15': {'precision': array([0.9066]), 'recall': array([0.2236])}, 'res5_gan20': {'precision': array([0.8496]), 'recall': array([0.1768])}}, 'infogan4_l01_s3_4RL_model': {'res_gan': {'precision': array([0.4816]), 'recall': array([0.2106])}, 'res_gan5': {'precision': array([0.7162]), 'recall': array([0.344])}, 'res_gan10': {'precision': array([0.723]), 'recall': array([0.3366])}, 'res_gan15': {'precision': array([0.7104]), 'recall': array([0.324])}, 'res_gan20': {'precision': array([0.6344]), 'recall': array([0.2482])}, 'res5_gan15': {'precision': array([0.7748]), 'recall': array([0.3482])}, 'res5_gan20': {'precision': array([0.7222]), 'recall': array([0.2792])}}, 'infogan5_l15_s3_4RL_model': {'res_gan': {'precision': array([0.2914]), 'recall': array([0.1536])}, 'res_gan5': {'precision': array([0.6974]), 'recall': array([0.5118])}, 'res_gan10': {'precision': array([0.7238]), 'recall': array([0.5278])}, 'res_gan15': {'precision': array([0.7144]), 'recall': array([0.5222])}, 'res_gan20': {'precision': array([0.6582]), 'recall': array([0.4128])}, 'res5_gan15': {'precision': array([0.7722]), 'recall': array([0.5758])}, 'res5_gan20': {'precision': array([0.7312]), 'recall': array([0.4752])}}, 'infogan6_l35_s3_4RL_model': {'res_gan': {'precision': array([0.2118]), 'recall': array([0.131])}, 'res_gan5': {'precision': array([0.6406]), 'recall': array([0.5028])}, 'res_gan10': {'precision': array([0.685]), 'recall': array([0.5414])}, 'res_gan15': {'precision': array([0.67]), 'recall': array([0.511])}, 'res_gan20': {'precision': array([0.6156]), 'recall': array([0.4266])}, 'res5_gan15': {'precision': array([0.731]), 'recall': array([0.5864])}, 'res5_gan20': {'precision': array([0.6822]), 'recall': array([0.4932])}}, 'infogan7_l01_s6_4RL_model': {'res_gan': {'precision': array([0.4844]), 'recall': array([0.373])}, 'res_gan5': {'precision': array([0.6656]), 'recall': array([0.517])}, 'res_gan10': {'precision': array([0.6872]), 'recall': array([0.4996])}, 'res_gan15': {'precision': array([0.6566]), 'recall': array([0.4848])}, 'res_gan20': {'precision': array([0.6064]), 'recall': array([0.3964])}, 'res5_gan15': {'precision': array([0.7336]), 'recall': array([0.5368])}, 'res5_gan20': {'precision': array([0.6858]), 'recall': array([0.4518])}}, 'infogan8_l15_s6_4RL_model': {'res_gan': {'precision': array([0.3174]), 'recall': array([0.4642])}, 'res_gan5': {'precision': array([0.6548]), 'recall': array([0.6876])}, 'res_gan10': {'precision': array([0.6906]), 'recall': array([0.6836])}, 'res_gan15': {'precision': array([0.6866]), 'recall': array([0.67])}, 'res_gan20': {'precision': array([0.6384]), 'recall': array([0.5574])}, 'res5_gan15': {'precision': array([0.7586]), 'recall': array([0.746])}, 'res5_gan20': {'precision': array([0.7236]), 'recall': array([0.6572])}}, 'infogan9_l35_s6_4RL_model': {'res_gan': {'precision': array([0.2606]), 'recall': array([0.4568])}, 'res_gan5': {'precision': array([0.6034]), 'recall': array([0.6284])}, 'res_gan10': {'precision': array([0.6576]), 'recall': array([0.636])}, 'res_gan15': {'precision': array([0.6458]), 'recall': array([0.604])}, 'res_gan20': {'precision': array([0.6048]), 'recall': array([0.532])}, 'res5_gan15': {'precision': array([0.7346]), 'recall': array([0.68])}, 'res5_gan20': {'precision': array([0.6986]), 'recall': array([0.6194])}}, 'vae1': {'res_vae': {'precision': array([0.9494]), 'recall': array([0.3442])}}, 'vae2': {'res_vae': {'precision': array([0.9492]), 'recall': array([0.3394])}}, 'vae3': {'res_vae': {'precision': array([0.952]), 'recall': array([0.3456])}}, 'vae4': {'res_vae': {'precision': array([0.9478]), 'recall': array([0.342])}}, 'vae5': {'res_vae': {'precision': array([0.9484]), 'recall': array([0.3442])}}, 'vae6': {'res_vae': {'precision': array([0.9518]), 'recall': array([0.3466])}}, 'vae7': {'res_vae': {'precision': array([0.9464]), 'recall': array([0.3392])}}, 'vae8': {'res_vae': {'precision': array([0.9476]), 'recall': array([0.3448])}}, 'vae9': {'res_vae': {'precision': array([0.9448]), 'recall': array([0.3424])}}}
Chosen n_points:  7500
InfoGAN model with ld:  infogan1_l01_s2_4RL_model 2
Device is: cuda
torch.Size([7500, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.49952s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.60602s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.41751s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.44984s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.50421s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.50321s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.38456s
InfoGAN model with ld:  infogan2_l15_s2_4RL_model 2
Device is: cuda
torch.Size([7500, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.32523s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.37352s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.32587s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.23668s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.303s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.41193s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.49467s
InfoGAN model with ld:  infogan3_l35_s2_4RL_model 2
Device is: cuda
torch.Size([7500, 2])
torch.float32
<class 'torch.Tensor'>
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.68175s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.41135s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.49147s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.39449s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.342s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.47622s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.35645s
InfoGAN model with ld:  infogan4_l01_s3_4RL_model 3
Device is: cuda
torch.Size([7500, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([7500, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.33847s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.48702s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.44727s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.44934s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.60564s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.59873s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.68848s
InfoGAN model with ld:  infogan5_l15_s3_4RL_model 3
Device is: cuda
torch.Size([7500, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([7500, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.69097s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.5836s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.54233s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.6483s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.64267s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.61602s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.66934s
InfoGAN model with ld:  infogan6_l35_s3_4RL_model 3
Device is: cuda
torch.Size([7500, 3])
torch.float32
<class 'torch.Tensor'>
torch.Size([7500, 3]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.4182s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.62405s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.69455s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.55428s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.58591s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.6971s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.60481s
InfoGAN model with ld:  infogan7_l01_s6_4RL_model 6
Device is: cuda
torch.Size([7500, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([7500, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.72875s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.528s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.41718s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.60487s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.52885s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.59152s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.62545s
InfoGAN model with ld:  infogan8_l15_s6_4RL_model 6
Device is: cuda
torch.Size([7500, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([7500, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.63087s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.70873s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.70445s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.90345s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.85867s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.85786s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.88554s
InfoGAN model with ld:  infogan9_l35_s6_4RL_model 6
Device is: cuda
torch.Size([7500, 6])
torch.float32
<class 'torch.Tensor'>
torch.Size([7500, 6]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.65324s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.74402s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.85155s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.73493s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.7292s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.76162s
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.73824s
VAE model with ld:  vae1 2
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 7.90041s
VAE model with ld:  vae2 2
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 7.85782s
VAE model with ld:  vae3 2
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 7.85937s
VAE model with ld:  vae4 3
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 7.92745s
VAE model with ld:  vae5 3
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.10395s
VAE model with ld:  vae6 3
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 7.94063s
VAE model with ld:  vae7 6
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 7.89996s
VAE model with ld:  vae8 6
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 7.83427s
VAE model with ld:  vae9 6
torch.Size([7500, 2]) <class 'torch.Tensor'> torch.float32
torch.Size([7500, 128])
torch.Size([7500, 128]) <class 'torch.Tensor'> torch.float32
Starting to calculate InfoGAN PR....
Evaluating k-NN precision and recall with 7500 samples...
Evaluated k-NN precision and recall in: 8.13141s
Results ready  {'infogan1_l01_s2_4RL_model': {'res_gan': {'precision': array([0.57026667]), 'recall': array([0.13373333])}, 'res_gan5': {'precision': array([0.72973333]), 'recall': array([0.214])}, 'res_gan10': {'precision': array([0.7368]), 'recall': array([0.20786667])}, 'res_gan15': {'precision': array([0.72426667]), 'recall': array([0.20706667])}, 'res_gan20': {'precision': array([0.644]), 'recall': array([0.16026667])}, 'res5_gan15': {'precision': array([0.77386667]), 'recall': array([0.20946667])}, 'res5_gan20': {'precision': array([0.71533333]), 'recall': array([0.1628])}}, 'infogan2_l15_s2_4RL_model': {'res_gan': {'precision': array([0.6184]), 'recall': array([0.14493333])}, 'res_gan5': {'precision': array([0.91253333]), 'recall': array([0.2768])}, 'res_gan10': {'precision': array([0.91733333]), 'recall': array([0.28146667])}, 'res_gan15': {'precision': array([0.8968]), 'recall': array([0.2772])}, 'res_gan20': {'precision': array([0.8004]), 'recall': array([0.21666667])}, 'res5_gan15': {'precision': array([0.93493333]), 'recall': array([0.28146667])}, 'res5_gan20': {'precision': array([0.87173333]), 'recall': array([0.21786667])}}, 'infogan3_l35_s2_4RL_model': {'res_gan': {'precision': array([0.53506667]), 'recall': array([0.10693333])}, 'res_gan5': {'precision': array([0.8536]), 'recall': array([0.21826667])}, 'res_gan10': {'precision': array([0.874]), 'recall': array([0.22733333])}, 'res_gan15': {'precision': array([0.86186667]), 'recall': array([0.226])}, 'res_gan20': {'precision': array([0.77586667]), 'recall': array([0.18213333])}, 'res5_gan15': {'precision': array([0.91213333]), 'recall': array([0.22733333])}, 'res5_gan20': {'precision': array([0.85093333]), 'recall': array([0.18333333])}}, 'infogan4_l01_s3_4RL_model': {'res_gan': {'precision': array([0.4656]), 'recall': array([0.19853333])}, 'res_gan5': {'precision': array([0.69986667]), 'recall': array([0.32573333])}, 'res_gan10': {'precision': array([0.7124]), 'recall': array([0.32133333])}, 'res_gan15': {'precision': array([0.6956]), 'recall': array([0.30973333])}, 'res_gan20': {'precision': array([0.6124]), 'recall': array([0.24946667])}, 'res5_gan15': {'precision': array([0.7504]), 'recall': array([0.32453333])}, 'res5_gan20': {'precision': array([0.68893333]), 'recall': array([0.26186667])}}, 'infogan5_l15_s3_4RL_model': {'res_gan': {'precision': array([0.2452]), 'recall': array([0.13213333])}, 'res_gan5': {'precision': array([0.68133333]), 'recall': array([0.50813333])}, 'res_gan10': {'precision': array([0.7076]), 'recall': array([0.5412])}, 'res_gan15': {'precision': array([0.7]), 'recall': array([0.52946667])}, 'res_gan20': {'precision': array([0.63226667]), 'recall': array([0.42506667])}, 'res5_gan15': {'precision': array([0.74653333]), 'recall': array([0.566])}, 'res5_gan20': {'precision': array([0.69453333]), 'recall': array([0.47])}}, 'infogan6_l35_s3_4RL_model': {'res_gan': {'precision': array([0.20573333]), 'recall': array([0.12373333])}, 'res_gan5': {'precision': array([0.64426667]), 'recall': array([0.4836])}, 'res_gan10': {'precision': array([0.68253333]), 'recall': array([0.5264])}, 'res_gan15': {'precision': array([0.67013333]), 'recall': array([0.504])}, 'res_gan20': {'precision': array([0.59293333]), 'recall': array([0.4088])}, 'res5_gan15': {'precision': array([0.72]), 'recall': array([0.552])}, 'res5_gan20': {'precision': array([0.664]), 'recall': array([0.44906667])}}, 'infogan7_l01_s6_4RL_model': {'res_gan': {'precision': array([0.45]), 'recall': array([0.3516])}, 'res_gan5': {'precision': array([0.6628]), 'recall': array([0.52653333])}, 'res_gan10': {'precision': array([0.68346667]), 'recall': array([0.50826667])}, 'res_gan15': {'precision': array([0.66266667]), 'recall': array([0.49053333])}, 'res_gan20': {'precision': array([0.59773333]), 'recall': array([0.40053333])}, 'res5_gan15': {'precision': array([0.72706667]), 'recall': array([0.5336])}, 'res5_gan20': {'precision': array([0.67266667]), 'recall': array([0.45146667])}}, 'infogan8_l15_s6_4RL_model': {'res_gan': {'precision': array([0.268]), 'recall': array([0.428])}, 'res_gan5': {'precision': array([0.64293333]), 'recall': array([0.68306667])}, 'res_gan10': {'precision': array([0.68213333]), 'recall': array([0.676])}, 'res_gan15': {'precision': array([0.68013333]), 'recall': array([0.6364])}, 'res_gan20': {'precision': array([0.62346667]), 'recall': array([0.5572])}, 'res5_gan15': {'precision': array([0.7468]), 'recall': array([0.71333333])}, 'res5_gan20': {'precision': array([0.69893333]), 'recall': array([0.63706667])}}, 'infogan9_l35_s6_4RL_model': {'res_gan': {'precision': array([0.2424]), 'recall': array([0.40333333])}, 'res_gan5': {'precision': array([0.59946667]), 'recall': array([0.59853333])}, 'res_gan10': {'precision': array([0.65893333]), 'recall': array([0.60333333])}, 'res_gan15': {'precision': array([0.65186667]), 'recall': array([0.56613333])}, 'res_gan20': {'precision': array([0.59413333]), 'recall': array([0.49173333])}, 'res5_gan15': {'precision': array([0.72106667]), 'recall': array([0.64266667])}, 'res5_gan20': {'precision': array([0.67346667]), 'recall': array([0.57])}}, 'vae1': {'res_vae': {'precision': array([0.95146667]), 'recall': array([0.36106667])}}, 'vae2': {'res_vae': {'precision': array([0.94906667]), 'recall': array([0.37013333])}}, 'vae3': {'res_vae': {'precision': array([0.948]), 'recall': array([0.36533333])}}, 'vae4': {'res_vae': {'precision': array([0.95386667]), 'recall': array([0.36853333])}}, 'vae5': {'res_vae': {'precision': array([0.946]), 'recall': array([0.3652])}}, 'vae6': {'res_vae': {'precision': array([0.94946667]), 'recall': array([0.36986667])}}, 'vae7': {'res_vae': {'precision': array([0.952]), 'recall': array([0.3628])}}, 'vae8': {'res_vae': {'precision': array([0.95]), 'recall': array([0.3588])}}, 'vae9': {'res_vae': {'precision': array([0.94906667]), 'recall': array([0.3652])}}}
